#!/bin/bash
# Oraine Waite 




# function for lottery application
RUN (){
reset;
s=6

count=0
for((i=0;i<$s;i++))
do
#the ARR1[i] in the above for loop over writes or "re-initialize" the values in array so that previous values do not remain which could interfere with checking to see if a value has been previously entered. 
Arr1[i]=0
done
cat << EOF
 WELCOME TO QUICK CASH LTD
EOF
#for loop to allow user to enter 6 numbers
for((i=0; i<$s; i++))
do
clear;sleep 1;
read -p "Enter any val from 1 to 38 and do not repeat:" num

#just in case your wondering k's upper limit is set to i for sake of efficiency..how so? by checking numbers with previous indexes up to the current it eliminates the need to search numbers with indexes beyond its own given that all those numbers are zero due to the "re-inialization of the player Array values to zero....can be found in line 13 or within the first for loop.
 for((k=0; k<=$i; k++))
 do
# -n ${num//[0-9]/} this piece of code found in the below while is used to validate the user input...to check if user has entered a letter if so ask for input again
#while loop to repeat above input request if user violates any of the input conditions
      while [[ $num -eq ${Arr1[k]} || $num -lt 1 || $num -gt 38 ||  -n ${num//[0-9]/} ]] 
           do
            clear;sleep 2;
             read -p "The input you just entered is either already in the system,outside of the valid range or is an invalid input type ...please try again:" num
           done
done

#array that stores user picks
Arr1[i]=$((num))
done
#
sleep 1; clear;
#prints user picks to screen
echo "player numbers:"${Arr1[*]}

for ((i=0;i<$s;i++))
do
#array to store random numbers generated by the system; six of the are generated as according to the above for loop
Arr2[i]=$(( (RANDOM % 38)+1))

#the code below prevents a repeat of the random generated numbers by comparing the generated number with other numbers above and below its index
#first for loop checks the numbers in the higher indexes
for((j=$i; j<=$s; j++))
do
#this for loop checks the numbers in the lower indexes
for((l=$i-1; l>=0; l--))

do
#this while loop is used to repeatedly check if the current value of the array is eual to any of the other numbers and if so changes that value
	while [[ ${Arr2[i]} -eq ${Arr2[j+1]} ||  ${Arr2[i]} -eq ${Arr2[l]} ]]
	 do
         Arr2[i]=$(( (RANDOM % 38)+1))
         done
done
done
done
# Lottery number repeat prevention code Ends here

#code to print lottery numbers
echo "lottery numbers:" ${Arr2[*]}
#below is the code used to check the matching numbers in the player array and the system's random array
#the code works by selecting a value in the player array via the first for loop then looks for a match in the system's random array via the meachanism of the inner for loop
for((i=0; i<$s; i++))
do
for((m=0; m<$s; m++))
do
if [ ${Arr1[i]} -eq ${Arr2[m]} ]
then
#this piece of code serves to mark the matched numbers in the lotery array by placing a zero at their location
Arr2[m]=0
#below is just used to keep track of how many numbers have been matched
count=$((count+1))
fi
done
done

#below the series of if statements serves to see if the player has won and if so how much
if [ "$count" -eq 6 ]
then
echo "you have won 25 million dollars"
fi

if [ "$count" -eq 5 ]
then
echo "you have won 5 million dollars"
fi

if [ "$count" -eq 4 ]
then
echo "you have won a million dollars"
fi

if [ "$count" -lt 4 ]
then
echo "No Winnings"
fi

echo "Amount of numbers matched:"$count


#continuation meachanism

read -p "select 1 to play again,else ENTER key or any key then hit ENTER to quit " choice
case $choice in
1)RUN;;
*)exit 0;;
esac
}
RUN


